export class Complex<T> {
protected:
  mutable real: T;
  mutable img: T;

public:
  real: () -> {}
  img: () -> {}

  real: (val: T) -> {}
  img: (val: T) -> {}

  self: (val: T) -> {
    return {real: val, img: 0.0};
  }

  +: (other: Complex) -> Complex {
    return {real: self.real + other.real, img: self.img + other.img};
  }

  ==: (other: Complex) -> Bool {
    return self.real == other.real && self.img == other.img;
  }

  conjugate: () -> Complex {
    return {real: self.real, img: -self.img};
  }

  magnitude: () -> Float {
    return math::sqrt((self.real * self.real + self.img * self.img) |> Float);
  }
}